/**
* CsvApp
* 
* Load csv and spreadsheet folders.
* 
* @param {Object} config - Options set in main function 
* for ease of use.
*/
function CsvApp(config) {
	
	// Import config
	this.extend(config);
		
	// Get folders
	this.root = new Folder(DriveApp.getRootFolder());
	this.testMode ? this.mode = 'test' : this.mode = 'deploy';
    this.folders = this.getSubFolders(
    	['csvs_new', 'csvs_processed', 'csvs_notValid', 'logs', 'spreadsheets'],
    	['csv2sheet', this.mode]
    );	
	
	// Restore blank slate for test runs
	if (this.testMode) { 
		this.resetTest();
	};
    
	// Special sauce 
	this.defaultColWidth = 150; // ... sheet needs a lot more formatting
};

CsvApp.prototype = {
		
	/**
	 * createSpreadsheet
	 * 
	 * @param {String} name - Spreadsheet specified in metadata.
	 * @return {Object} spreadsheet - CsvApp spreadsheet object.
	 */
	createSpreadsheet : function(name) {

		// Create Google spreadsheet and instantiate CsvApp Spreadsheet object 
		var spreadsheet = new Spreadsheet(SpreadsheetApp.create(name));
		
		// Log
		Logger.log("New spreadsheet \'%s\' created", name)							
		
		// Move file to spreadsheets folder 
		this.root.moveFile(spreadsheet.file, this.folders.spreadsheets); 
			
		return spreadsheet;
	},
	
	/**
	 * getSpreadsheet
	 * 
	 * @param {String} name - Specified in metadata
	 * @returns {Object} spreadsheet - CsvApp spreadsheet object
	 */
	getSpreadsheetByName : function(name) {

		// Get spreadsheet files keyed by filename
		var spreadsheets = this.folders.spreadsheets.getFiles();
		
		// Return CsvApp spreadsheet object if Google spreadsheet exists
		if (spreadsheets[name]) {
			var spreadsheet = new Spreadsheet(SpreadsheetApp.open(spreadsheets[name]));
			return spreadsheet;
		}
		
		// Otherwise ...
		return false
	},
  
	/**
	 * getSubFolders
	 * 
	 * Traverse path (optional) to get Drive folders by name. Note: 
	 * Method does not handle multiple folders with same name and 
	 * DriveApp offers no reliable way to identify current folder!
	 * 
	 * @param {array} - subfolders -  subfolder names, e.g., 
	 * ['foldername1', 'foldername2' ...]
	 * @param {array} - path - parent hierarchy, e.g., 
	 * ['grandparent_foldername', 'parent_foldername'] 
	 * @return {object} - folders - CsvApp Folder objects keyed by
	 * folder name.
	 */
	getSubFolders : function (subfolders, path) {
		
		if(path) {
          
			// Get first folder in path via DriveApp
			var parent = DriveApp.getFoldersByName(path[0]).next();
			
			for (var i=1; i <= path.length; i++) {
	
				// Get intermediate folders in hierarchy
				if (i < (path.length)) {
					parent = parent.getFoldersByName(path[i]).next();
				}

				// Get subfolders and instantiate CsvApp folder object
				else {	
					var folders = {};					
					subfolders.forEach( function(el) {
						folders[el] = new Folder(parent.getFoldersByName(el).next());
					});
				}
			}	
		} 
		
		
		// In the absence of path, just get each subfolder by name
		else {
			var folders = {};
			subfolders.forEach( function(el) {
				folders[el] = new Folder(DriveApp.getFoldersByName(el).next());
			})
		};

		return folders
	},


	/** 
	 * resetAll
	 *  
	 * Standalone function to remove all files in deploy folders 
	 * and restore intial state in test folders (including removal
	 * of test logs). Execute from utilities function run_resetAll
	 */
	resetAll : function() {
		
		// Run before or after resetTest() 
		
		// Also delete test logs
		this.folders.logs.empty();
		
		// Get deployed subfolders
		this.deployFolders = this.getSubFolders(
				['csvs_new', 'csvs_processed', 'csvs_notValid', 'logs', 'spreadsheets'],
				['csv2sheet', 'deploy']
		);
		
		// Delete files in deploy folders
		for (var i in this.deployFolders) {
			this.deployFolders[i].empty();
		}
          
    },	
  
	/**
	 * resetTest
	 * 
	 * Restore test csvs to initial locations and delete 
	 * generated spreadsheets 
	 */
	resetTest : function() {
		
        Logger.log('Resetting test files.');
                   
		// Delete spreadsheets generated by test
		this.folders.spreadsheets.empty();
		
		// Restore test csvs to "new" folder
		this.folders.csvs_processed.moveFiles(this.folders.csvs_new);
		this.folders.csvs_notValid.moveFiles(this.folders.csvs_new);
	}
}